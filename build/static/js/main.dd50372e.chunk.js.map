{"version":3,"sources":["components/ChannelContainer.jsx","components/ChannelListContainer.jsx","assets/AddChannel.js","assets/ChannelInfo.js","assets/CloseCreateChannel.js","assets/InviteIcon.js","assets/SearchIcon.js","components/ChannelSearch.jsx","components/TeamChannelList.jsx","components/TeamChannelPreview.jsx","components/ChannelInner.jsx","components/CreateChannel.jsx","components/EditChannel.jsx","assets/signup.jpg","components/Auth.jsx","components/UserList.jsx","components/ResultsDropdown.jsx","App.jsx","index.js"],"names":["ChannelContainer","_ref","isCreating","setIsCreating","isEditing","setIsEditing","createType","_jsx","className","children","CreateChannel","EditChannel","Channel","EmptyStateIndicator","_jsxs","Message","messageProps","i","MessageTeam","_objectSpread","ChannelInner","cookies","Cookies","SideBar","logout","RiFlightTakeoffLine","width","height","style","fontSize","onClick","TbLogout","marginLeft","CompanyHeader","customChannelTeamFilter","channels","filter","channel","type","customChannelMessagingFilter","ChannelListContent","_ref2","setCreateType","setToggleContainer","filters","members","$in","useChatContext","client","userID","_Fragment","remove","window","location","reload","ChannelSearch","ChannelList","channelRenderFilterFn","List","listProps","TeamChannelList","Preview","previewProps","TeamChannelPreview","ChannelListContainer","_ref3","_useState","useState","_useState2","_slicedToArray","toggleContainer","left","backgroundColor","prevToggleContainer","AddChannel","viewBox","fill","xmlns","prevState","d","fillOpacity","ChannelInfo","CloseCreateChannel","InviteIcon","SearchIcon","fillRule","clipRule","_useChatContext","setActiveChannel","query","setQuery","_useState3","_useState4","loading","setLoading","_useState5","_useState6","teamChannels","setTeamChannels","_useState7","_useState8","directChannels","setDirectChannels","useEffect","getChannels","_asyncToGenerator","_regeneratorRuntime","mark","_callee","text","channelResponse","userResponse","_yield$Promise$all","_yield$Promise$all2","users","wrap","_context","prev","next","queryChannels","name","$autocomplete","queryUsers","id","$ne","Promise","all","sent","length","t0","stop","_x","apply","arguments","placeholder","value","onChange","event","preventDefault","target","ResultsDropdown","setChannel","_ref$error","error","activeChannel","ChannelPreview","_channel$data","_channel$data2","data","DirectPreview","_members$","_members$$user","_members$2","_members$2$user","_members$3","_members$3$user","_members$4","_members$4$user","_members$5","_members$5$user","Object","values","state","user","console","log","Avatar","image","fullName","size","GiphyContext","React","createContext","TeamChannelHeader","watchers","_useChannelStateConte","useChannelStateContext","watcher_count","MessagingHeader","additionalMembers","map","_ref4","display","concat","giphyState","setGiphyState","sendMessage","useChannelActionContext","Provider","Window","MessageList","MessageInput","overrideSubmitHandler","message","_message$parent","updatedMessage","attachments","mentioned_users","parent_id","parent","Thread","ChannelNameInput","_ref$channelName","channelName","setChannelName","selectedUsers","setSelectedUsers","createChannel","e","newChannel","watch","UserList","updateChannel","update","addMembers","initialState","username","password","confirmPassword","phoneNumber","avatarURL","Auth","form","setForm","isSignup","setIsSignup","handleChange","_defineProperty","handleSubmit","_yield$axios$post","_yield$axios$post$dat","token","userId","hashedPassword","axios","post","set","onSubmit","htmlFor","required","prevIsSignup","src","signinImage","alt","ListContainer","UserItem","selected","setSelected","prevUsers","prevUser","_toConsumableArray","prevSelected","setUsers","listEmpty","setListEmpty","_useState9","_useState10","setError","getUsers","response","abrupt","limit","index","channelByUser","_yield$client$queryCh","_yield$client$queryCh2","existingChannel","member_count","$eq","SearchResult","focusedId","_callee2","_context2","undefined","_ref5","authToken","get","StreamChat","getInstance","connectUser","App","Chat","theme","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd50372e.chunk.js","sourcesContent":["import React from 'react';\nimport { Channel, MessageTeam } from 'stream-chat-react';\n\nimport { ChannelInner, CreateChannel, EditChannel } from './';\n\nconst ChannelContainer = ({ isCreating, setIsCreating, isEditing, setIsEditing, createType }) => {\n    if(isCreating) {\n        return (\n            <div className=\"channel__container\">\n                <CreateChannel createType={createType} setIsCreating={setIsCreating} />\n            </div>\n        )\n    }\n\n    if(isEditing) {\n        return (\n            <div className=\"channel__container\">\n                <EditChannel setIsEditing={setIsEditing} />\n            </div> \n        )\n    }\n\n    const EmptyState = () => (\n        <div className=\"channel-empty__container\">\n            <p className=\"channel-empty__first\">This is the beginning of your chat history.</p>\n            <p className=\"channel-empty__second\">Send messages, attachments, links, emojis, and more!</p>\n        </div>\n    )\n\n    return (\n        <div className=\" channel__container\">\n            <Channel\n                EmptyStateIndicator={EmptyState}\n                Message={(messageProps, i) => <MessageTeam key={i} {...messageProps} />}\n            >\n                <ChannelInner setIsEditing={setIsEditing} />\n            </Channel>\n        </div>\n    );\n}\n\nexport default ChannelContainer;\n","import React, { useState } from 'react';\nimport { ChannelList, useChatContext } from 'stream-chat-react';\nimport Cookies from 'universal-cookie';\n\nimport { ChannelSearch, TeamChannelList, TeamChannelPreview } from './';\nimport {RiFlightTakeoffLine} from \"react-icons/ri\"\nimport {TbLogout} from \"react-icons/tb\"\n\nconst cookies = new Cookies();\n\nconst SideBar = ({ logout }) => (\n    <div className=\"channel-list__sidebar\">\n        <div className=\"channel-list__sidebar__icon1\">\n            <div className=\"icon1__inner\">\n              \n                <RiFlightTakeoffLine width={180} height={40} style={{width:\"200px\", fontSize:\"30px\"}} />\n            </div>\n        </div>\n        <div className=\"channel-list__sidebar__icon2\">\n            <div className=\"icon1__inner\" onClick={logout}>\n                {/* <img src={LogoutIcon} alt=\"Logout\" width=\"30\" /> */}\n                <TbLogout style={{fontSize:\"30px\", marginLeft:\"3px\"}}/>\n            </div>\n        </div>\n    </div>\n);\n\nconst CompanyHeader = () => (\n    <div className=\"channel-list__header\">\n        <p className=\"channel-list__header__text\">Travel App</p>\n    </div>\n)\n\nconst customChannelTeamFilter = (channels) => {\n    return channels.filter((channel) => channel.type === 'team');\n}\n\nconst customChannelMessagingFilter = (channels) => {\n    return channels.filter((channel) => channel.type === 'messaging');\n}\n\nconst ChannelListContent = ({ isCreating, setIsCreating, setCreateType, setIsEditing, setToggleContainer }) => {\n    const { client } = useChatContext();\n\n    const logout = () => {\n        cookies.remove(\"token\");\n        cookies.remove('userId');\n        cookies.remove('username');\n        cookies.remove('fullName');\n        cookies.remove('avatarURL');\n        cookies.remove('hashedPassword');\n        cookies.remove('phoneNumber');\n\n        window.location.reload();\n    }\n\n    const filters = { members: { $in: [client.userID] } };\n\n    return (\n        <>\n            <SideBar logout={logout} />\n            <div className=\"channel-list__list__wrapper\">\n                <CompanyHeader />\n                <ChannelSearch setToggleContainer={setToggleContainer} />\n                <ChannelList \n                    filters={filters}\n                    channelRenderFilterFn={customChannelTeamFilter}\n                    List={(listProps) => (\n                        <TeamChannelList \n                            {...listProps}\n                            type=\"team\"\n                            isCreating={isCreating}\n                            setIsCreating={setIsCreating}\n                            setCreateType={setCreateType} \n                            setIsEditing={setIsEditing}\n                            setToggleContainer={setToggleContainer}\n                        />\n                    )}\n                    Preview={(previewProps) => (\n                        <TeamChannelPreview \n                            {...previewProps}\n                            setIsCreating={setIsCreating}\n                            setIsEditing={setIsEditing}\n                            setToggleContainer={setToggleContainer}\n                            type=\"team\"\n                        />\n                    )}\n                />\n                <ChannelList \n                    filters={filters}\n                    channelRenderFilterFn={customChannelMessagingFilter}\n                    List={(listProps) => (\n                        <TeamChannelList \n                            {...listProps}\n                            type=\"messaging\"\n                            isCreating={isCreating}\n                            setIsCreating={setIsCreating}\n                            setCreateType={setCreateType} \n                            setIsEditing={setIsEditing}\n                            setToggleContainer={setToggleContainer}\n                        />\n                    )}\n                    Preview={(previewProps) => (\n                        <TeamChannelPreview \n                            {...previewProps}\n                            setIsCreating={setIsCreating}\n                            setIsEditing={setIsEditing}\n                            setToggleContainer={setToggleContainer}\n                            type=\"messaging\"\n                        />\n                    )}\n                />\n            </div>\n        </>\n    );\n}\n\nconst ChannelListContainer = ({ setCreateType, setIsCreating, setIsEditing }) => {\n    const [toggleContainer, setToggleContainer] = useState(false);\n\n    return (\n        <>\n            <div className=\"channel-list__container\">\n              <ChannelListContent \n                setIsCreating={setIsCreating} \n                setCreateType={setCreateType} \n                setIsEditing={setIsEditing} \n              />\n            </div>\n\n            <div className=\"channel-list__container-responsive\"\n                style={{ left: toggleContainer ? \"0%\" : \"-89%\", backgroundColor: \"#005fff\"}}\n            >\n                <div className=\"channel-list__container-toggle\" onClick={() => setToggleContainer((prevToggleContainer) => !prevToggleContainer)}>\n                </div>\n                <ChannelListContent \n                setIsCreating={setIsCreating} \n                setCreateType={setCreateType} \n                setIsEditing={setIsEditing}\n                setToggleContainer={setToggleContainer}\n              />\n            </div>\n        </>\n    )\n\n}\n\nexport default ChannelListContainer;\n","import React from 'react';\n\nexport const AddChannel = ({ setCreateType, setIsCreating, setIsEditing, setToggleContainer, type }) => (\n  <svg\n    width='14'\n    height='14'\n    viewBox='0 0 14 14'\n    fill='none'\n    xmlns='http://www.w3.org/2000/svg'\n    onClick={() => {\n      setCreateType(type);\n      setIsCreating((prevState) => !prevState);\n      setIsEditing(false);\n      if(setToggleContainer) setToggleContainer((prevState) => !prevState) \n    }}\n  >\n    <path\n      d='M7 0C3.13438 0 0 3.13438 0 7C0 10.8656 3.13438 14 7 14C10.8656 14 14 10.8656 14 7C14 3.13438 10.8656 0 7 0ZM11 7.5H7.5V11H6.5V7.5H3V6.5H6.5V3H7.5V6.5H11V7.5Z'\n      fill='white'\n      fillOpacity='0.66'\n    />\n  </svg>\n);\n","import React from 'react';\n\nexport const ChannelInfo = () => (\n  <svg width='18' height='18' viewBox='0 0 18 18' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M8.16602 6.49837H9.83269V4.83171H8.16602V6.49837ZM8.99936 15.665C5.32351 15.665 2.33268 12.6743 2.33268 8.99833C2.33268 5.32253 5.32351 2.33171 8.99936 2.33171C12.6752 2.33171 15.666 5.32253 15.666 8.99833C15.666 12.6743 12.6752 15.665 8.99936 15.665ZM8.99936 0.665039C4.39684 0.665039 0.666016 4.39587 0.666016 8.99833C0.666016 13.6009 4.39684 17.3317 8.99936 17.3317C13.6019 17.3317 17.3327 13.6009 17.3327 8.99833C17.3327 4.39587 13.6019 0.665039 8.99936 0.665039ZM8.16602 13.165H9.83269V8.165H8.16602V13.165Z'\n      fill='black'\n      fillOpacity='0.33'\n    />\n  </svg>\n);\n","import React from 'react';\n\nexport const CloseCreateChannel = ({ setIsCreating, setIsEditing }) => (\n  <svg\n    width='32'\n    height='32'\n    viewBox='0 0 32 32'\n    fill='none'\n    xmlns='http://www.w3.org/2000/svg'\n    onClick={() => {\n      if (setIsCreating) setIsCreating(false);\n      if (setIsEditing) setIsEditing(false);\n    }}\n  >\n    <path\n      d='M6.10042 6.10051C0.633603 11.5673 0.633603 20.4327 6.10042 25.8995C11.5672 31.3663 20.4326 31.3663 25.8994 25.8995C31.3662 20.4327 31.3662 11.5673 25.8994 6.10051C20.4326 0.633686 11.5672 0.633685 6.10042 6.10051ZM22.3639 11.0503L17.4141 16L22.3639 20.9497L20.9497 22.364L15.9999 17.4142L11.0502 22.364L9.63596 20.9497L14.5857 16L9.63596 11.0503L11.0502 9.63604L15.9999 14.5858L20.9497 9.63604L22.3639 11.0503Z'\n      fill='var(--primary-color)'\n    />\n  </svg>\n);\n","import React from 'react';\n\nexport const InviteIcon = () => (\n  <div style={{ marginLeft: '2px' }}>\n    <svg width='28' height='28' viewBox='0 0 28 28' fill='none' xmlns='http://www.w3.org/2000/svg'>\n      <path\n        d='M14 0C6.26875 0 0 6.26875 0 14C0 21.7313 6.26875 28 14 28C21.7313 28 28 21.7313 28 14C28 6.26875 21.7313 0 14 0ZM21.1812 9.31875L12.4875 20.475C12.4187 20.5438 12.3062 20.6938 12.1687 20.6938C12.025 20.6938 11.9313 20.5938 11.85 20.5125C11.7688 20.4313 6.91875 15.7687 6.91875 15.7687L6.825 15.675C6.7875 15.6187 6.75625 15.55 6.75625 15.475C6.75625 15.4 6.7875 15.3312 6.825 15.275C6.85 15.25 6.86875 15.2313 6.89375 15.2C7.375 14.6938 8.35 13.6687 8.4125 13.6062C8.49375 13.525 8.5625 13.4187 8.7125 13.4187C8.86875 13.4187 8.96875 13.55 9.04375 13.625C9.11875 13.7 11.8562 16.3312 11.8562 16.3312L18.8125 7.39375C18.875 7.34375 18.95 7.30625 19.0312 7.30625C19.1125 7.30625 19.1875 7.3375 19.25 7.3875L21.1625 8.89375C21.2125 8.95625 21.2437 9.03125 21.2437 9.1125C21.25 9.19375 21.2188 9.2625 21.1812 9.31875Z'\n        fill='#1D9D67'\n      />\n    </svg>\n  </div>\n);\n","import React from 'react';\n\nexport const SearchIcon = () => (\n  <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='none' viewBox='0 0 16 16'>\n    <path\n      fill='#fff'\n      fillOpacity='0.66'\n      fillRule='evenodd'\n      d='M2.7 6.95a4.25 4.25 0 117.306 2.954 1.001 1.001 0 00-.102.102A4.25 4.25 0 012.7 6.95zm7.906 5.07a6.25 6.25 0 111.414-1.414l2.987 2.987a1 1 0 11-1.414 1.414l-2.987-2.987z'\n      clipRule='evenodd'\n    ></path>\n  </svg>\n);\n","import React, { useState, useEffect } from 'react';\nimport { useChatContext } from 'stream-chat-react';\n\nimport { ResultsDropdown } from './'\nimport { SearchIcon } from '../assets';\n\nconst ChannelSearch = ({ setToggleContainer }) => {\n    const { client, setActiveChannel } = useChatContext();\n    const [query, setQuery] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [teamChannels, setTeamChannels] = useState([])\n    const [directChannels, setDirectChannels] = useState([])\n\n    useEffect(() => {\n        if(!query) {\n            setTeamChannels([]);\n            setDirectChannels([]);\n        }\n    }, [query])\n\n    const getChannels = async (text) => {\n        try {\n            const channelResponse = client.queryChannels({\n                type: 'team', \n                name: { $autocomplete: text }, \n                members: { $in: [client.userID]}\n            });\n            const userResponse = client.queryUsers({\n                id: { $ne: client.userID },\n                name: { $autocomplete: text }\n            })\n\n            const [channels, { users }] = await Promise.all([channelResponse, userResponse]);\n\n            if(channels.length) setTeamChannels(channels);\n            if(users.length) setDirectChannels(users);\n        } catch (error) {\n            setQuery('')\n        }\n    }\n\n    const onSearch = (event) => {\n        event.preventDefault();\n\n        setLoading(true);\n        setQuery(event.target.value);\n        getChannels(event.target.value)\n    }\n\n    const setChannel = (channel) => {\n        setQuery('');\n        setActiveChannel(channel);\n    }\n\n    return (\n        <div className=\"channel-search__container\">\n            <div className=\"channel-search__input__wrapper\">\n                <div className=\"channel-serach__input__icon\">\n                    <SearchIcon />\n                </div>\n                <input \n                    className=\"channel-search__input__text\" \n                    placeholder=\"Search\" \n                    type=\"text\" \n                    value={query}  \n                    onChange={onSearch}\n                />\n            </div>\n            { query && (\n                <ResultsDropdown \n                    teamChannels={teamChannels}\n                    directChannels={directChannels}\n                    loading={loading}\n                    setChannel={setChannel}\n                    setQuery={setQuery}\n                    setToggleContainer={setToggleContainer}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default ChannelSearch\n","import React from 'react';\n\nimport { AddChannel } from '../assets';\n\nconst TeamChannelList = ({ setToggleContainer, children, error = false, loading, type, isCreating, setIsCreating, setCreateType, setIsEditing }) => {\n    if(error) {\n        return type === 'team' ? (\n            <div className=\"team-channel-list\">\n                <p className=\"team-channel-list__message\">\n                    Connection error, please wait a moment and try again.\n                </p>\n            </div>\n        ) : null\n    }\n\n    if(loading) {\n        return (\n            <div className=\"team-channel-list\">\n                <p className=\"team-channel-list__message loading\">\n                    {type === 'team' ? 'Channels' : 'Messages'} loading...\n                </p>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"team-channel-list\">\n            <div className=\"team-channel-list__header\">\n                <p className=\"team-channel-list__header__title\">\n                    {type === 'team' ? 'Channels' : 'Direct Messages'}\n                </p>\n                <AddChannel \n                    isCreating={isCreating}\n                    setIsCreating={setIsCreating}\n                    setCreateType={setCreateType} \n                    setIsEditing={setIsEditing}\n                    type={type === 'team' ? 'team' : 'messaging'}\n                    setToggleContainer={setToggleContainer}\n                />\n            </div>\n            {children}\n        </div>\n    )\n}\n\nexport default TeamChannelList\n","import React from 'react';\nimport { Avatar, useChatContext } from 'stream-chat-react';\n\nconst TeamChannelPreview = ({ setActiveChannel, setIsCreating, setIsEditing, setToggleContainer, channel, type }) => {\n    const { channel: activeChannel, client } = useChatContext();\n\n    const ChannelPreview = () => (\n        <p className=\"channel-preview__item\">\n            # {channel?.data?.name || channel?.data?.id}\n        </p>\n    );\n\n\n    const DirectPreview = () => {\n        const members = Object.values(channel.state.members).filter(({ user }) => user.id !== client.userID);\n    \n        console.log(members[0]);\n\n        return (\n            <div className=\"channel-preview__item single\">\n                <Avatar \n                    image={members[0]?.user?.image}\n                    name={members[0]?.user?.fullName || members[0]?.user?.id}\n                    size={24}\n                />\n                <p>{members[0]?.user?.fullName || members[0]?.user?.id}</p>\n            </div>\n        )\n    }\n\n    return (\n        <div className={\n            channel?.id === activeChannel?.id\n                ? 'channel-preview__wrapper__selected'\n                : 'channel-preview__wrapper'\n        }\n        onClick={() => {\n            setIsCreating(false);\n            setIsEditing(false);\n            setActiveChannel(channel);\n            if(setToggleContainer) {\n                setToggleContainer((prevState) => !prevState)\n            }\n        }}\n        >\n            {type === 'team' ? <ChannelPreview /> : <DirectPreview />}\n        </div>\n    );\n}\n\nexport default TeamChannelPreview\n","import React, { useState } from 'react';\nimport { MessageList, MessageInput, Thread, Window, useChannelActionContext, Avatar, useChannelStateContext, useChatContext } from 'stream-chat-react';\n\nimport { ChannelInfo } from '../assets';\n\nexport const GiphyContext = React.createContext({});\n\nconst ChannelInner = ({ setIsEditing }) => {\n  const [giphyState, setGiphyState] = useState(false);\n  const { sendMessage } = useChannelActionContext();\n  \n  const overrideSubmitHandler = (message) => {\n    let updatedMessage = {\n      attachments: message.attachments,\n      mentioned_users: message.mentioned_users,\n      parent_id: message.parent?.id,\n      parent: message.parent,\n      text: message.text,\n    };\n    \n    if (giphyState) {\n      updatedMessage = { ...updatedMessage, text: `/giphy ${message.text}` };\n    }\n    \n    if (sendMessage) {\n      sendMessage(updatedMessage);\n      setGiphyState(false);\n    }\n  };\n\n  return (\n    <GiphyContext.Provider value={{ giphyState, setGiphyState }}>\n      <div style={{ display: 'flex', width: '100%' }}>\n        <Window>\n          <TeamChannelHeader setIsEditing={setIsEditing} />\n          <MessageList />\n          <MessageInput overrideSubmitHandler={overrideSubmitHandler} />\n        </Window>\n        <Thread />\n      </div>\n    </GiphyContext.Provider>\n  );\n};\n\nconst TeamChannelHeader = ({ setIsEditing }) => {\n    const { channel, watcher_count } = useChannelStateContext();\n    const { client } = useChatContext();\n  \n    const MessagingHeader = () => {\n      const members = Object.values(channel.state.members).filter(({ user }) => user.id !== client.userID);\n      const additionalMembers = members.length - 3;\n  \n      if(channel.type === 'messaging') {\n        return (\n          <div className='team-channel-header__name-wrapper'>\n            {members.map(({ user }, i) => (\n              <div key={i} className='team-channel-header__name-multi'>\n                <Avatar image={user.image} name={user.fullName || user.id} size={32} />\n                <p className='team-channel-header__name user'>{user.fullName || user.id}</p>\n              </div>\n            ))}\n  \n            {additionalMembers > 0 && <p className='team-channel-header__name user'>and {additionalMembers} more</p>}\n          </div>\n        );\n      }\n  \n      return (\n        <div className='team-channel-header__channel-wrapper'>\n          <p className='team-channel-header__name'># {channel.data.name}</p>\n          <span style={{ display: 'flex' }} onClick={() => setIsEditing(true)}>\n            <ChannelInfo />\n          </span>\n        </div>\n      );\n    };\n  \n    const getWatcherText = (watchers) => {\n      if (!watchers) return 'No users online';\n      if (watchers === 1) return '1 user online';\n      return `${watchers} users online`;\n    };\n  \n    return (\n      <div className='team-channel-header__container'>\n        <MessagingHeader />\n        <div className='team-channel-header__right'>\n          <p className='team-channel-header__right-text'>{getWatcherText(watcher_count)}</p>\n        </div>\n      </div>\n    );\n  };\n\n  export default ChannelInner;\n","import React, { useState } from 'react';\nimport { useChatContext } from 'stream-chat-react';\n\nimport { UserList } from './';\nimport { CloseCreateChannel } from '../assets';\n\nconst ChannelNameInput = ({ channelName = '', setChannelName }) => {\n    const handleChange = (event) => {\n        event.preventDefault();\n\n        setChannelName(event.target.value);\n    }\n\n    return (\n        <div className=\"channel-name-input__wrapper\">\n            <p>Name</p>\n            <input value={channelName} onChange={handleChange} placeholder=\"channel-name\" />\n            <p>Add Members</p>\n        </div>\n    )\n}\n\nconst CreateChannel = ({ createType, setIsCreating }) => {\n    const { client, setActiveChannel } = useChatContext();\n    const [selectedUsers, setSelectedUsers] = useState([client.userID || ''])\n    const [channelName, setChannelName] = useState('');\n\n    const createChannel = async (e) => {\n        e.preventDefault();\n\n        try {\n            const newChannel = await client.channel(createType, channelName, {\n                name: channelName, members: selectedUsers\n            });\n\n            await newChannel.watch();\n\n            setChannelName('');\n            setIsCreating(false);\n            setSelectedUsers([client.userID]);\n            setActiveChannel(newChannel);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    return (\n        <div className=\"create-channel__container\">\n            <div className=\"create-channel__header\">\n                <p>{createType === 'team' ? 'Create a New Channel' : 'Send a Direct Message'}</p>\n                <CloseCreateChannel setIsCreating={setIsCreating} />\n            </div>\n            {createType === 'team' && <ChannelNameInput channelName={channelName} setChannelName={setChannelName}/>}\n            <UserList setSelectedUsers={setSelectedUsers} />\n            <div className=\"create-channel__button-wrapper\" onClick={createChannel}>\n                <p>{createType === 'team' ? 'Create Channel' : 'Create Message Group'}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default CreateChannel\n","import React, { useState } from 'react';\nimport { useChatContext } from 'stream-chat-react';\n\nimport { UserList } from './';\nimport { CloseCreateChannel } from '../assets';\n\nconst ChannelNameInput = ({ channelName = '', setChannelName }) => {\n    const handleChange = (event) => {\n        event.preventDefault();\n\n        setChannelName(event.target.value);\n    }\n\n    return (\n        <div className=\"channel-name-input__wrapper\">\n            <p>Name</p>\n            <input value={channelName} onChange={handleChange} placeholder=\"channel-name\" />\n            <p>Add Members</p>\n        </div>\n    )\n}\n\nconst EditChannel = ({ setIsEditing }) => {\n    const { channel } = useChatContext();\n    const [channelName, setChannelName] = useState(channel?.data?.name);\n    const [selectedUsers, setSelectedUsers] = useState([])\n\n    const updateChannel = async (event) => {\n        event.preventDefault();\n\n        const nameChanged = channelName !== (channel.data.name || channel.data.id);\n\n        if(nameChanged) {\n            await channel.update({ name: channelName }, { text: `Channel name changed to ${channelName}`});\n        }\n\n        if(selectedUsers.length) {\n            await channel.addMembers(selectedUsers);\n        }\n\n        setChannelName(null);\n        setIsEditing(false);\n        setSelectedUsers([]);\n    }\n\n    return (\n        <div className=\"edit-channel__container\">\n            <div className=\"edit-channel__header\">\n                <p>Edit Channel</p>\n                <CloseCreateChannel setIsEditing={setIsEditing} />\n            </div>\n            <ChannelNameInput channelName={channelName} setChannelName={setChannelName} />\n            <UserList setSelectedUsers={setSelectedUsers} />\n            <div className=\"edit-channel__button-wrapper\" onClick={updateChannel}>\n                <p>Save Changes</p>\n            </div>\n        </div>\n    )\n}\n\nexport default EditChannel\n","export default __webpack_public_path__ + \"static/media/signup.f535f5e2.jpg\";","import React, { useState } from 'react';\nimport Cookies from 'universal-cookie';\nimport axios from 'axios';\n\nimport signinImage from '../assets/signup.jpg';\n\nconst cookies = new Cookies();\n\nconst initialState = {\n    fullName: '',\n    username: '',\n    password: '',\n    confirmPassword: '',\n    phoneNumber: '',\n    avatarURL: '',\n}\n\nconst Auth = () => {\n    const [form, setForm] = useState(initialState);\n    const [isSignup, setIsSignup] = useState(true);\n\n    const handleChange = (e) => {\n        setForm({ ...form, [e.target.name]: e.target.value });\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const { username, password, phoneNumber, avatarURL } = form;\n\n        const URL = 'https://flight-websocket.onrender.com/';\n\n        const { data: { token, userId, hashedPassword, fullName } } = await axios.post(`${URL}/${isSignup ? 'signup' : 'login'}`, {\n            username, password, fullName: form.fullName, phoneNumber, avatarURL,\n        });\n\n        cookies.set('token', token);\n        cookies.set('username', username);\n        cookies.set('fullName', fullName);\n        cookies.set('userId', userId);\n\n        if(isSignup) {\n            cookies.set('phoneNumber', phoneNumber);\n            cookies.set('avatarURL', avatarURL);\n            cookies.set('hashedPassword', hashedPassword);\n        }\n\n        window.location.reload();\n    }\n\n    const switchMode = () => {\n        setIsSignup((prevIsSignup) => !prevIsSignup);\n    }\n\n    return (\n        <div className=\"auth__form-container\">\n            <div className=\"auth__form-container_fields\">\n                <div className=\"auth__form-container_fields-content\">\n                    <p>{isSignup ? 'Sign Up' : 'Sign In'}</p>\n                    <form onSubmit={handleSubmit}>\n                        {isSignup && (\n                            <div className=\"auth__form-container_fields-content_input\">\n                                <label htmlFor=\"fullName\">Full Name</label>\n                                <input \n                                    name=\"fullName\" \n                                    type=\"text\"\n                                    placeholder=\"Full Name\"\n                                    onChange={handleChange}\n                                    required\n                                />\n                            </div>\n                        )}\n                        <div className=\"auth__form-container_fields-content_input\">\n                            <label htmlFor=\"username\">Username</label>\n                                <input \n                                    name=\"username\" \n                                    type=\"text\"\n                                    placeholder=\"Username\"\n                                    onChange={handleChange}\n                                    required\n                                />\n                            </div>\n                        {isSignup && (\n                            <div className=\"auth__form-container_fields-content_input\">\n                                <label htmlFor=\"phoneNumber\">Phone Number</label>\n                                <input \n                                    name=\"phoneNumber\" \n                                    type=\"text\"\n                                    placeholder=\"Phone Number\"\n                                    onChange={handleChange}\n                                    required\n                                />\n                            </div>\n                        )}\n                        {isSignup && (\n                            <div className=\"auth__form-container_fields-content_input\">\n                                <label htmlFor=\"avatarURL\">Avatar URL</label>\n                                <input \n                                    name=\"avatarURL\" \n                                    type=\"text\"\n                                    placeholder=\"Avatar URL\"\n                                    onChange={handleChange}\n                                    required\n                                />\n                            </div>\n                        )}\n                        <div className=\"auth__form-container_fields-content_input\">\n                                <label htmlFor=\"password\">Password</label>\n                                <input \n                                    name=\"password\" \n                                    type=\"password\"\n                                    placeholder=\"Password\"\n                                    onChange={handleChange}\n                                    required\n                                />\n                            </div>\n                        {isSignup && (\n                            <div className=\"auth__form-container_fields-content_input\">\n                                <label htmlFor=\"confirmPassword\">Confirm Password</label>\n                                <input \n                                    name=\"confirmPassword\" \n                                    type=\"password\"\n                                    placeholder=\"Confirm Password\"\n                                    onChange={handleChange}\n                                    required\n                                />\n                            </div>\n                            )}\n                        <div className=\"auth__form-container_fields-content_button\">\n                            <button>{isSignup ? \"Sign Up\" : \"Sign In\"}</button>\n                        </div>\n                    </form>\n                    <div className=\"auth__form-container_fields-account\">\n                        <p>\n                            {isSignup\n                             ? \"Already have an account?\" \n                             : \"Don't have an account?\"\n                             }\n                             <span onClick={switchMode}>\n                             {isSignup ? 'Sign In' : 'Sign Up'}\n                             </span>\n                        </p>\n                    </div>\n                </div> \n            </div>\n            <div className=\"auth__form-container_image\">\n                <img src={signinImage} alt=\"sign in\" />\n            </div>\n        </div>\n    )\n}\n\nexport default Auth\n","import React, { useEffect, useState } from 'react';\nimport { Avatar, useChatContext } from 'stream-chat-react';\n\nimport { InviteIcon } from '../assets';\n\nconst ListContainer = ({ children }) => {\n    return (\n        <div className=\"user-list__container\">\n            <div className=\"user-list__header\">\n                <p>User</p>\n                <p>Invite</p>\n            </div>\n            {children}\n        </div>\n    )\n}\n\nconst UserItem = ({ user, setSelectedUsers }) => {\n    const [selected, setSelected] = useState(false)\n\n    const handleSelect = () => {\n        if(selected) {\n            setSelectedUsers((prevUsers) => prevUsers.filter((prevUser) => prevUser !== user.id))\n        } else {\n            setSelectedUsers((prevUsers) => [...prevUsers, user.id])\n        }\n\n        setSelected((prevSelected) => !prevSelected)\n    }\n\n    return (\n        <div className=\"user-item__wrapper\" onClick={handleSelect}>\n            <div className=\"user-item__name-wrapper\">\n                <Avatar image={user.image} name={user.fullName || user.id} size={32} />\n                <p className=\"user-item__name\">{user.fullName || user.id}</p>\n            </div>\n            {selected ? <InviteIcon /> : <div className=\"user-item__invite-empty\" />}\n        </div>\n    )\n}\n\n\nconst UserList = ({ setSelectedUsers }) => {\n    const { client } = useChatContext();\n    const [users, setUsers] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [listEmpty, setListEmpty] = useState(false);\n    const [error, setError] = useState(false);\n\n    useEffect(() => {\n        const getUsers = async () => {\n            if(loading) return;\n\n            setLoading(true);\n            \n            try {\n                const response = await client.queryUsers(\n                    { id: { $ne: client.userID } },\n                    { id: 1 },\n                    { limit: 8 } \n                );\n\n                if(response.users.length) {\n                    setUsers(response.users);\n                } else {\n                    setListEmpty(true);\n                }\n            } catch (error) {\n               setError(true);\n            }\n            setLoading(false);\n        }\n\n        if(client) getUsers()\n    }, []);\n\n    if(error) {\n        return (\n            <ListContainer>\n                <div className=\"user-list__message\">\n                    Error loading, please refresh and try again.\n                </div>\n            </ListContainer>\n        )\n    }\n\n    if(listEmpty) {\n        return (\n            <ListContainer>\n                <div className=\"user-list__message\">\n                    No users found.\n                </div>\n            </ListContainer>\n        )\n    }\n\n    return (\n        <ListContainer>\n            {loading ? <div className=\"user-list__message\">\n                Loading users...\n            </div> : (\n                users?.map((user, i) => (\n                  <UserItem index={i} key={user.id} user={user} setSelectedUsers={setSelectedUsers} />  \n                ))\n            )}\n        </ListContainer>\n    )\n}\n\nexport default UserList;","import React from 'react';\nimport { Avatar, useChatContext } from 'stream-chat-react';\n\nconst channelByUser = async ({ client, setActiveChannel, channel, setChannel }) => {\n  const filters = {\n    type: 'messaging',\n    member_count: 2,\n    members: { $eq: [client.user.id, client.userID] },\n  };\n\n  const [existingChannel] = await client.queryChannels(filters);\n\n  if (existingChannel) return setActiveChannel(existingChannel);\n\n  const newChannel = client.channel('messaging', { members: [channel.id, client.userID] });\n  \n  setChannel(newChannel)\n\n  return setActiveChannel(newChannel);\n};\n\nconst SearchResult = ({ channel, focusedId, type, setChannel, setToggleContainer }) => {\n  const { client, setActiveChannel } = useChatContext();\n\n  if (type === 'channel') {\n    return (\n      <div\n        onClick={() => {\n          setChannel(channel)\n          if(setToggleContainer) {\n            setToggleContainer((prevState) => !prevState)   \n          }\n        }}\n        className={focusedId === channel.id ? 'channel-search__result-container__focused' : 'channel-search__result-container' }\n      >\n        <div className='result-hashtag'>#</div>\n        <p className='channel-search__result-text'>{channel.data.name}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      onClick={async () => {\n        channelByUser({ client, setActiveChannel, channel, setChannel })\n        if(setToggleContainer) {\n            setToggleContainer((prevState) => !prevState)   \n        }\n      }}\n      className={focusedId === channel.id ? 'channel-search__result-container__focused' : 'channel-search__result-container' }\n    >\n      <div className='channel-search__result-user'>\n        <Avatar image={channel.image || undefined} name={channel.name} size={24} />\n        <p className='channel-search__result-text'>{channel.name}</p>\n      </div>\n    </div>\n  );\n};\n\nconst ResultsDropdown = ({ teamChannels, directChannels, focusedId, loading, setChannel, setToggleContainer }) => {\n\n  return (\n    <div className='channel-search__results'>\n      <p className='channel-search__results-header'>Channels</p>\n      {loading && !teamChannels.length && (\n        <p className='channel-search__results-header'>\n          <i>Loading...</i>\n        </p>\n      )}\n      {!loading && !teamChannels.length ? (\n        <p className='channel-search__results-header'>\n          <i>No channels found</i>\n        </p>\n      ) : (\n        teamChannels?.map((channel, i) => (\n          <SearchResult\n            channel={channel}\n            focusedId={focusedId}\n            key={i}\n            setChannel={setChannel}\n            type='channel'\n            setToggleContainer={setToggleContainer}\n          />\n        ))\n      )}\n      <p className='channel-search__results-header'>Users</p>\n      {loading && !directChannels.length && (\n        <p className='channel-search__results-header'>\n          <i>Loading...</i>\n        </p>\n      )}\n      {!loading && !directChannels.length ? (\n        <p className='channel-search__res ults-header'>\n          <i>No direct messages found</i>\n        </p>\n      ) : (\n        directChannels?.map((channel, i) => (\n          <SearchResult\n            channel={channel}\n            focusedId={focusedId}\n            key={i}\n            setChannel={setChannel}\n            type='user'\n            setToggleContainer={setToggleContainer}\n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default ResultsDropdown;","import React, { useState } from 'react';\nimport { StreamChat } from 'stream-chat';\nimport { Chat } from 'stream-chat-react';\nimport Cookies from 'universal-cookie';\n\nimport { ChannelListContainer, ChannelContainer, Auth } from './components';\n\nimport 'stream-chat-react/dist/css/index.css';\nimport './App.css';\n\nconst cookies = new Cookies();\n\nconst apiKey = 'pqbq6waxtf2e';\n\nconst authToken = cookies.get(\"token\");\n\nconst client = StreamChat.getInstance(apiKey);\n\nif(authToken) {\n    client.connectUser({\n        id: cookies.get('userId'),\n        name: cookies.get('username'),\n        fullName: cookies.get('fullName'),\n        image: cookies.get('avatarURL'),\n        hashedPassword: cookies.get('hashedPassword'),\n        phoneNumber: cookies.get('phoneNumber'),\n    }, authToken)\n}\n\n\nconst App = () => {\n    const [createType, setCreateType] = useState('');\n    const [isCreating, setIsCreating] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n\n    if(!authToken) return <Auth />\n\n    return (\n        <div className=\"app__wrapper\">\n            <Chat client={client} theme=\"team light\">\n                <ChannelListContainer \n                    isCreating={isCreating}\n                    setIsCreating={setIsCreating}\n                    setCreateType={setCreateType}\n                    setIsEditing={setIsEditing}\n                />\n                <ChannelContainer \n                    isCreating={isCreating}\n                    setIsCreating={setIsCreating}\n                    isEditing={isEditing}\n                    setIsEditing={setIsEditing}\n                    createType={createType}\n                />\n            </Chat>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}